<?php

abstract class ADaisyPublisherInlinedTagsConvertor {
	protected $branch;
	protected $language;
	protected $version;
	
	abstract public function getDocumentHref($daisyLink);
	abstract public function getImageSrc($daisyLink, $part);
	
	abstract public function convertLink(SimpleXMLElement $a);	
	abstract public function convertImageLink(SimpleXMLElement $img);
	abstract public function convertSearchResults(SimpleXMLElement $res);
	
	final public function setConvertorParameters($branch, $language, $version) {
		if (empty($branch)) throw new EDaisyEmptyArgumentSupplied(array('branch'));
		if (empty($language)) throw new EDaisyEmptyArgumentSupplied(array('language'));
		if (empty($version)) throw new EDaisyEmptyArgumentSupplied(array('version'));
		
		$this->branch = $branch;
		$this->language = $language;
		$this->version = $version;
	}
	
	final protected function explodeDaisyLink($daisyLink) {
		if (empty($daisyLink)) throw new EDaisyEmptyArgumentSupplied(array('daisyLink'));
		if (strpos($daisyLink, 'daisy:') !== 0) throw new EDaisyWrongDaisyLink($daisyLink);
		
		$link = explode(':', $daisyLink);
		if (!isset($link[1])) throw new EDaisyWrongDaisyLink($daisyLink);
		
		$idAndBranch = explode('@', $link[1]);
				
		$linkArray['id'] = $idAndBranch[0];
		if (!empty($idAndBranch[1])) $linkArray['branch'] = $idAndBranch[1];
		else $linkArray['branch'] = $this->branch;
		
		if (!empty($link[2])) $linkArray['language'] = $link[2];
		else $linkArray['language'] = $this->language;
		
		if(!empty($link[3])) $linkArray['version'] = $link[3];
		else $linkArray['version'] = $this->version;
		
		return $linkArray;
	}
	
}

?>
